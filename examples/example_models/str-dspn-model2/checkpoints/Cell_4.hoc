/*
Created by BluePyOpt(1.11.5) at 2022-06-20 13:05:47.613653
*/
{load_file("stdrun.hoc")}
{load_file("import3d.hoc")}
/*
 * Check that global parameters are the same as with the optimization
 */
proc check_parameter(/* name, expected_value, value */){
  strdef error
  if($2 != $3){
    sprint(error, "Parameter %s has different value %f != %f", $s1, $2, $3)
    execerror(error)
  }
}
proc check_simulator() {
  check_parameter("celsius", 35, celsius)
  check_parameter("v_init", -86, v_init)
}

begintemplate Cell_4
  public init, morphology, geom_nseg_fixed, geom_nsec, gid
  public channel_seed, channel_seed_set
  public soma, dend, apic, axon, myelin
  create soma[1], dend[1], apic[1], axon[1], myelin[1]

  objref this, CellRef, segCounts

  public all, somatic, apical, axonal, basal, myelinated, APC
  objref all, somatic, apical, axonal, basal, myelinated, APC

proc init(/* args: morphology_dir, morphology_name */) {
  all = new SectionList()
  apical = new SectionList()
  axonal = new SectionList()
  basal = new SectionList()
  somatic = new SectionList()
  myelinated = new SectionList()

  //gid in this case is only used for rng seeding
  gid = 0

  //For compatibility with BBP CCells
  CellRef = this

  forall delete_section()

  if(numarg() >= 2) {
    load_morphology($s1, $s2)
  } else {
    load_morphology($s1, "21-6-DE-cor-rep-ax-res3.swc")
  }

  geom_nseg()
    replace_axon()
  insertChannel()
  biophys()

  // Initialize channel_seed_set to avoid accidents
  channel_seed_set = 0
  // Initialize random number generators
  re_init_rng()
}

proc load_morphology(/* morphology_dir, morphology_name */) {localobj morph, import, sf, extension
  strdef morph_path
  sprint(morph_path, "%s/%s", $s1, $s2)

  sf = new StringFunctions()
  extension = new String()

  sscanf(morph_path, "%s", extension.s)
  sf.right(extension.s, sf.len(extension.s)-4)

  if( strcmp(extension.s, ".asc") == 0 ) {
    morph = new Import3d_Neurolucida3()
  } else if( strcmp(extension.s, ".swc" ) == 0) {
    morph = new Import3d_SWC_read()
  } else {
    printf("Unsupported file format: Morphology file has to end with .asc or .swc" )
    quit()
  }

  morph.quiet = 1
  morph.input(morph_path)

  import = new Import3d_GUI(morph, 0)
  import.instantiate(this)
}

/*
 * Assignment of mechanism values based on distance from the soma
 * Matches the BluePyOpt method
 */
proc distribute_distance(){local x localobj sl
  strdef stmp, distfunc, mech

  sl = $o1
  mech = $s2
  distfunc = $s3
  this.soma[0] distance(0, 0.5)
  sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
  forsec sl for(x, 0) {
    sprint(stmp, distfunc, secname(), x, distance(x))
    execute(stmp)
  }
}

proc geom_nseg() {
  this.geom_nsec() //To count all sections
  //TODO: geom_nseg_fixed depends on segCounts which is calculated by
  //  geom_nsec.  Can this be collapsed?
  this.geom_nseg_fixed(40)
  this.geom_nsec() //To count all sections
}

proc insertChannel() {
  forsec this.all {
    insert pas
  }
  forsec this.apical {
  }
  forsec this.axonal {
    insert naf_ms
    insert kas_ms
    insert Im_ms
  }
  forsec this.basal {
    insert naf_ms
    insert kaf_ms
    insert kas_ms
    insert kdr_ms
    insert kir_ms
    insert cal12_ms
    insert cal13_ms
    insert car_ms
    insert cat32_ms
    insert cat33_ms
    insert cadyn_ms
    insert caldyn_ms
    insert sk_ms
    insert bk_ms
  }
  forsec this.somatic {
    insert naf_ms
    insert kaf_ms
    insert kas_ms
    insert kdr_ms
    insert kir_ms
    insert cal12_ms
    insert cal13_ms
    insert can_ms
    insert car_ms
    insert cadyn_ms
    insert caldyn_ms
    insert sk_ms
    insert bk_ms
    insert Im_ms
  }
  forsec this.myelinated {
  }
}

proc biophys() {
  
  forsec CellRef.all {
    e_pas = -76.51568940881964
    cm = 1
    Ra = 273.81815626626968
    ena = 53.340000000000003
    ek = -105.90000000000001
  }
  
  forsec CellRef.apical {
  }
  
  forsec CellRef.axonal {
    g_pas = 0.00080680399150105751
    gbar_naf_ms = 0.38376329092422046
    gbar_kas_ms = 0.0035984809342991713
    gbar_Im_ms = 0.098924732907414825
  }
  
  forsec CellRef.basal {
    g_pas = 4.7274423417815399e-05
    gbar_naf_ms = 0.002124537959108129
    gbar_kaf_ms = 0.0020044755868837117
    q_kaf_ms = 1.2310764224556812
    gbar_kas_ms = 0.00071895630723258332
    gbar_kdr_ms = 0.0002641386288967555
    gbar_kir_ms = 3.4514657703200951e-05
    pbar_cal12_ms = 1.0000000000000001e-05
    pbar_cal13_ms = 9.9999999999999995e-07
    pbar_car_ms = 0.0001
    pbar_cat32_ms = 2.0000000000000001e-09
    pbar_cat33_ms = 2.0000000000000001e-09
    gbar_bk_ms = 9.3949778011679947e-06
    gbar_sk_ms = 9.8510433225990099e-07
  }
  
  forsec CellRef.somatic {
    g_pas = 0.00050959651264854554
    gbar_naf_ms = 10.790225183494506
    gbar_kaf_ms = 0.42096852492285408
    q_kaf_ms = 1.2310764224556812
    gbar_kas_ms = 0.00068533724753723903
    gbar_kdr_ms = 0.00081992689725038999
    gbar_kir_ms = 0.0012872251495682726
    pbar_cal12_ms = 1.0000000000000001e-05
    pbar_cal13_ms = 9.9999999999999995e-07
    pbar_can_ms = 3.0000000000000001e-05
    pbar_car_ms = 0.0001
    gbar_bk_ms = 6.6283592316760054e-05
    gbar_sk_ms = 6.1129923974680313e-05
    gbar_Im_ms = 0.0001417518229339409
  }
  
  forsec CellRef.myelinated {
  }
  
}

func sec_count(/* SectionList */) { local nSec
  nSec = 0
  forsec $o1 {
      nSec += 1
  }
  return nSec
}

/*
 * Iterate over the section and compute how many segments should be allocate to
 * each.
 */
proc geom_nseg_fixed(/* chunkSize */) { local secIndex, chunkSize
  chunkSize = $1
  soma area(.5) // make sure diam reflects 3d points
  secIndex = 0
  forsec all {
    nseg = 1 + 2*int(L/chunkSize)
    segCounts.x[secIndex] = nseg
    secIndex += 1
  }
}

/*
 * Count up the number of sections
 */
proc geom_nsec() { local nSec
  nSecAll = sec_count(all)
  nSecSoma = sec_count(somatic)
  nSecApical = sec_count(apical)
  nSecBasal = sec_count(basal)
  nSecMyelinated = sec_count(myelinated)
  nSecAxonalOrig = nSecAxonal = sec_count(axonal)

  segCounts = new Vector()
  segCounts.resize(nSecAll)
  nSec = 0
  forsec all {
    segCounts.x[nSec] = nseg
    nSec += 1
  }
}

/*
 * Replace the axon built from the original morphology file with a stub axon
 */
    
proc replace_axon(){ local nSec, D1, D2
  // preserve the number of original axonal sections
  nSec = sec_count(axonal)

  // Try to grab info from original axon
  if(nSec == 0) { //No axon section present
    D1 = D2 = 1
  } else if(nSec == 1) {
    axon[0] D1 = D2 = diam
  } else {
    axon[0] D1 = diam
    soma distance() //to calculate distance from soma
    forsec axonal{
      //if section is longer than 60um then store diam and exit from loop
      if(distance(0.5) > 60){
        D2 = diam
        break
      }
    }
  }

  // get rid of the old axon
  forsec axonal{
    delete_section()
  }

  create axon[2]

  axon[0] {
    L = 30
    diam = D1
    nseg = 1 + 2*int(L/40)
    all.append()
    axonal.append()
  }
  axon[1] {
    L = 30
    diam = D2
    nseg = 1 + 2*int(L/40)
    all.append()
    axonal.append()
  }
  nSecAxonal = 2
  soma[0] connect axon[0](0), 1
  axon[0] connect axon[1](0), 1
}
        



func hash_str() {localobj sf strdef right
  sf = new StringFunctions()

  right = $s1

  n_of_c = sf.len(right)

  hash = 0
  char_int = 0
  for i = 0, n_of_c - 1 {
     sscanf(right, "%c", & char_int)
     hash = (hash * 31 + char_int) % (2 ^ 31 - 1)
     sf.right(right, 1)
  }

  return hash
}

proc re_init_rng() {localobj sf
    strdef full_str, name

    sf = new StringFunctions()

    if(numarg() == 1) {
        // We received a third seed
        channel_seed = $1
        channel_seed_set = 1
    } else {
        channel_seed_set = 0
    }


}


endtemplate Cell_4